#include "Injector.hpp"
#include "../Chipset/Chipset.hpp"
#include "../Peripheral/BatteryBackedRAM.hpp"
#include "hex.hpp"
#include "imgui/imgui.h"
#include "../Models.h"
#include <cstdlib>
#include <cstring>
#include <string>
#include "../Config.hpp"
#include "ui.hpp"
#include "UIScaling.h"
#include <filesystem>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <sstream>

struct InjectEntry {
    char address[10];
    char hexData[65536];
};

struct PresetInject {
    const char* name;
    std::vector<std::pair<uint32_t, std::string>> injects;
};

void Injector::RenderCore() {
    UI::Scaling::UpdateUIScale();

    static float scale = -1.0f;
    static int range = 64;
    static char strbuf[65536] = {0};
    static char buf[10] = {0};
    static char buf2[10] = {0};
    static MemoryEditor editor;
    static const char* info_msg = nullptr;
    static bool show_info_popup = false;
    auto inputbase = m_emu->hardware_id == casioemu::HardwareId::HW_CLASSWIZ_II ? 0x9268 : 0xD180;
    char* base_addr = n_ram_buffer - casioemu::GetRamBaseAddr(m_emu->hardware_id);
    static std::vector<InjectEntry> injectEntries;

    static const std::vector<PresetInject> presets = {
        {
            "Small Font[124an]",
            {
                {0xd180, "3030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030307ad832"}
            }
        },
        {
            "QuickCpy++[124an]",
            {
                {0xd8a0, "30300130300130022ED980D190AC3030303002753130CCD830303E9D303030"},
                {0xd8c0, "A09C30303030C0303616323030EA800E313087D930303030A89F3030BC6E3130"},
                {0xd8e0, "30302E623130FAEF5A30D20332302E623130A0EFA0D8E6BFA0EF"},
                {0xd180, "3030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302E62313011D10230D20332302E623130A0EFA0D8620D3230A0EFE6BF30305A"}
            }
        },
        {
            "Draw One Color[124an]",
            {
                {0xe9e},
                {0xda70, "80"},
                {0xdaa4, "ffff"},
                {0xdaa9, "ff"},
                {0xdae8, "01"},
                {0xdae5, "01"},
                {0xd180, "303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030DA7B3130D4DD200630303030369D3030DA7B31303030300130303030A6A8303012D1A59C303030303030DA7B313076D5E0E930303030509430303030"}
            }
        },
        {
            "Hex Editor(data)[quickcpy++]",
            {
                {0xe9e0, "10E3420701000CE3F0F502000000000000000000000000002E62010010E3DA83A89F00005CA000009498020000000000706101003E9D00002F0090C700003E9D00000400D44B01003E9D0000A700F4FC010066E3D44B0100084002000000000000000000741F020070610100F4FC01004000868C020098E3000090C700003E9D0000A800D44B0100084002000000000000000000741F020042E63E9D00000000A09C000044E60F00AE1B0200CC61010016390100D64B0100520B020000000000D20302003E9D000044E690C700003E9D00003800F4FC0100EEE3D44B0100084002000000000000000000741F020040E63E9D00000000A09C00001AE40000A59C000000000200B03A01000100800E010044E6000052E5361602000000BC6E01000000741F020042E63E9D00000100A09C000000000000B03A0100FAE5741F020086E4D64B0100A59C000000000000F4FC01001FFC18960100A89F00005CA000003E9D0000C400F4FC010080E4D44B0100084002000000000000000000741F0200C8E43E9D00000000A59C000000000000F4FC01001EFC18960100A89F00005CA000003E9D00006800F4FC0100C2E4D44B0100084002000000000000000000741F020000003E9D00000000F4FC010026FC18960100A89F00005CA000003E9D00000C00F4FC0100FAE4D44B0100084002000000000000000000741F0200B03A010002E6741F020040E63E9D00000000A09C00000000000030BF0000084002000000000000000000741F020040E63E9D00000100A09C000000000000B03A010052E5741F020040E63E9D0000FFFFA09C000042E642E63E9D00000000A59C000040E600003E9D00000000A09C0000BEE50000A59C00000000000030BF000070610100FA3F02000000000000000000A89F00005CA00000E6C1000000004EE6A59C000000000000EAED010050E600000000D64B0100A59C00005AE600006A21010000007482010010400200D64B0100A59C0000000000002E620100D4DD0006369D00002E620100050548E6808F00002E620100052553E6808F00007E9400008075010000052000865301003C9F00005CA0000048A2000032E63E9D00000100A59C000000000000A5300100400360E600E3000032890E000000B03A010000E3741F020051D5000000000000416464723A20000000000056616C75653A20000000000000"}
            }
        },
        {
            "Hex Editor(launcher)[124an,small font]",
            {
                {0xd180, "303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030A89F3030E0A03030A53031306003E0E930E33030186E3130328931303030A53031304003E0E960E601E3328931303030741F3230"}
            }
        },
        {
            "Tetris[Hex Editor]",
            {
                {0xd552, "2E62313050E7D0D65094303090022E62313070D1F0E7B03A313054D50A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A393130509430303030000000000000000000000000000000000000"},
                {0xd},
                {0xd},
                {0xe9e}
            }
        },
        {
            "Snake[124an]",
            {
                {0xd180, "3030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302E62313034D5E0E90A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A3931300A393130509430303030"},
                {0xd9f0, "A4EEFDFFA4EE00FD0000000000000000AEEEA4EE03000600B6EEBCEE00000909090A090B0C090C0A0C0B0C090C0A0C0BC6D90000000000000000000000000000A4EE0003A4EE0300"},
                {0xe9e},
                {0xeea0, "A6D9AEEEA4EE03000600B6EEBCEE00000909090A090B0C090C0A0C0B0C090C0A0C0BC6D9"},
            }
        },
        {
            "LC E9E0 TEST[110an]",
            {
                {0xd180, "30303030303030303030303030303030303030303030303030303030303030303030785c3130dee9600d3248"}
            }
        }
    };

    if (ImGui::BeginTabBar("InjectorTabs", ImGuiTabBarFlags_None)) {
        if (ImGui::BeginTabItem("Input")) {
            ImGui::BeginChild("Input", ImVec2(0, ImGui::GetWindowHeight() * 0.4));
            editor.DrawContents(data_buf, range);
            ImGui::EndChild();

            ImGui::SliderInt(
#if LANGUAGE == 2
                "输入内容大小"
#else
                "Input Size"
#endif
                , &range, 64, 1024);

            if (ImGui::Button(
#if LANGUAGE == 2
                    "加载数据到输入区"
#else
                    "Load to input area"
#endif
                    )) {
                memcpy(base_addr + inputbase, data_buf, range);
                info_msg = "Data loaded";
                show_info_popup = true;
            }

            ImGui::Separator();

            ImGui::Text(
#if LANGUAGE == 2
                "an前数字"
#else
                "x an"
#endif
            );
            ImGui::SameLine();
            ImGui::InputText("##off", buf, 9);
            ImGui::SameLine();
            if (ImGui::Button(
#if LANGUAGE == 2
                    "输入 an"
#else
                    "Input \"an\""
#endif
                    )) {
                int off = atoi(buf);
                if (off > 100) {
                    memset(base_addr + inputbase, 0x31, 100);
                    memset(base_addr + inputbase + 100, 0xa6, 1);
                    memset(base_addr + inputbase + 101, 0x31, off - 100);
                }
                else {
                    memset(base_addr + inputbase, 0x31, off);
                }
                *(base_addr + inputbase + off) = 0xfd;
                *(base_addr + inputbase + off + 1) = 0x20;
#if LANGUAGE == 2
                info_msg = "\"an\" 已输入";
#else
                info_msg = "\"an\" Inputed";
#endif
                show_info_popup = true;
            }

            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Inject")) {
            if (ImGui::Button("Add Inject Entry")) {
                injectEntries.push_back(InjectEntry());
            }

            for (size_t i = 0; i < injectEntries.size(); ++i) {
                ImGui::PushID(static_cast<int>(i));

                ImGui::SetNextItemWidth(UI::Scaling::minColumnWidth);

                ImGui::InputText("Inject addr", injectEntries[i].address, 10);

                ImGui::SameLine();
                if (ImGui::Button("Paste")) {
                    const char* clipboard_text = ImGui::GetClipboardText();
                    if (clipboard_text) {
                        strncpy(injectEntries[i].hexData, clipboard_text, sizeof(injectEntries[i].hexData) - 1);
                        injectEntries[i].hexData[sizeof(injectEntries[i].hexData) - 1] = '\0';
                        info_msg = "Hex data pasted from clipboard";
                        show_info_popup = true;
                    } else {
                        info_msg = "Failed to paste from clipboard";
                        show_info_popup = true;
                    }
                }

                ImGui::InputTextMultiline("## hex", injectEntries[i].hexData, IM_ARRAYSIZE(injectEntries[i].hexData) - 1);

                if (ImGui::Button("Inject hex")) {
                    auto plc = strtol(injectEntries[i].address, 0, 16);
                    auto valid_hex = [](char c) {
                        return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
                    };
                    size_t j = 0, k = 0;
                    char hex_buf[3];
                    while (injectEntries[i].hexData[j] != '\0' && injectEntries[i].hexData[j + 1] != '\0') {
                        if (injectEntries[i].hexData[j] == ';' || injectEntries[i].hexData[j + 1] == ';') {
                            for (;; ++j) {
                                if (injectEntries[i].hexData[j] == '\0')
                                    goto exit;
                                if (injectEntries[i].hexData[j] == '\n') {
                                    ++j;
                                    break;
                                }
                            }
                        }
                        else {
                            if (!(valid_hex(injectEntries[i].hexData[j]) && valid_hex(injectEntries[i].hexData[j + 1]))) {
                                ++j;
                                continue;
                            }
                            hex_buf[0] = injectEntries[i].hexData[j];
                            hex_buf[1] = injectEntries[i].hexData[j + 1];
                            hex_buf[2] = '\0';
                            uint8_t byte = strtoul(hex_buf, nullptr, 16);
                            me_mmu->WriteData(plc + k, byte);
                            j += 2;
                            ++k;
                        }
                    }
                exit:
                    info_msg = "Injected successfully";
                    show_info_popup = true;
                }

                ImGui::SameLine();
                if (ImGui::Button("Remove")) {
                    injectEntries.erase(injectEntries.begin() + i);
                    --i;
                }

                ImGui::Separator();
                ImGui::PopID();
            }

            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("fx580vnx")) {
            for (const auto& preset : presets) {
                if (ImGui::Button(preset.name)) {
                    for (const auto& inject : preset.injects) {
                        auto plc = inject.first;
                        const auto& hexData = inject.second;

                        auto valid_hex = [](char c) {
                            return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
                        };

                        size_t j = 0, k = 0;
                        char hex_buf[3];
                        while (j < hexData.length() - 1) {
                            if (hexData[j] == ' ') {
                                ++j;
                                continue;
                            }
                            if (!(valid_hex(hexData[j]) && valid_hex(hexData[j + 1]))) {
                                ++j;
                                continue;
                            }
                            hex_buf[0] = hexData[j];
                            hex_buf[1] = hexData[j + 1];
                            hex_buf[2] = '\0';
                            uint8_t byte = strtoul(hex_buf, nullptr, 16);
                            me_mmu->WriteData(plc + k, byte);
                            j += 2;
                            ++k;
                        }
                    }
                    info_msg = "Injected successfully";
                    show_info_popup = true;
                }
                ImGui::SameLine();
                ImGui::Text("Inject to %X", preset.injects[0].first);
            }
            ImGui::EndTabItem();
        }

        ImGui::EndTabBar();
    }

    if (show_info_popup) {
        ImGui::OpenPopup("info");
        show_info_popup = false;
    }

    if (ImGui::BeginPopupModal("info", nullptr, ImGuiWindowFlags_AlwaysAutoResize)) {
        ImGui::Text("%s", info_msg);
        if (ImGui::Button(
#if LANGUAGE == 2
                "好的"
#else
                "Ok"
#endif
                )) {
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
}