def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    if (buildAsApplication) {
        namespace "com.tele.u8emulator"
    }
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            //ndkBuild {
            //    arguments "APP_PLATFORM=android-19"
            //    abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //}
             cmake {
                 arguments "-DANDROID_APP_PLATFORM=android-24",
                          "-DANDROID_CPP_FEATURES=rtti exceptions"
                 //abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
                 abiFilters 'arm64-v8a'
             }
        }
    }
    signingConfigs {
        release {
            storeFile file("hieuxyz.keystore")
            storePassword "hieuxyz"
            keyAlias "hieuxyz"
            keyPassword "hieuxyz"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            //ndkBuild {
            //    path 'jni/Android.mk'
            //}
            cmake {
                path 'jni/CMakeLists.txt'
                version '3.22.1'
            }
        }
       
    }
    lint {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    //implementation 'androidx.core:core:1.5.0'
    //implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}